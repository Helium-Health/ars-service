name: Deploy to AWS Fargate Prod

on:
  workflow_dispatch:

env:
  ECS_SERVICE: PR0D-ARS-SRV-NEW   
  ECS_CLUSTER: Helium-Fargate-Prod-Cluster

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest


    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      # Configure aws credentials to have access to aws environment
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.PROD_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Login to aws ecr
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t ${{ secrets.PROD_ECR_REPOSITORY }} .
          docker tag ${{ secrets.PROD_ECR_REPOSITORY }}:latest ${{ secrets.ECR_REGISTRY }}/${{ secrets.PROD_ECR_REPOSITORY }}:latest
          docker push ${{ secrets.ECR_REGISTRY }}/${{ secrets.PROD_ECR_REPOSITORY }}:latest
          echo "::set-output name=image::${{ secrets.ECR_REGISTRY }}/${{ secrets.PROD_ECR_REPOSITORY }}:latest"

      - name: Deploy image
        run: |
          aws ecs update-service --cluster ${{ env.ECS_CLUSTER }} --service ${{ env.ECS_SERVICE }} --force-new-deployment
